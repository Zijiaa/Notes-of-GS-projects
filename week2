python words

	human time -> epoch time
	1970.1.1  -> int

1.programming = data structure + algorithm
2. CRUD= created, read, update, delete

	相对于C++，python无需编译，直接可运行  

	*从范式的思考回答：C++和python的区别*在xx情况下解决xx问题更好

python's package collection website: pipit.org

python typing :  https://realpython.com/python-type-checking/


二分法（必考）
binary search 

N total number
N --> lnN  

先排序
def b_search(arr, target):
    left = 0 #0
    right = len(arr) - 1 #5
    while left <= right:
        mid = (left + right) // 2 #overflow
        if arr[mid] == target:
            return mid    
        if arr[mid] > target:
            right = mid - 1
        else:
            left = mid + 1
    return -1

b_search(example,9)











Python Lesson2


	x.extend([1,2,3]) #Unpacks the list and adds each item to the back of the list

	<data structures and algorithms in python>  Goodrich MT    第一章看3遍以上
	iterators, generators(python独有),decorators:面试必考


1.排序算法
2.哈希算法


x="Hello"
print(x,id(x))
x+=" You!"
print(x,id(x)) #x is not the same object it was
y=["Hello"]
print(y,id(y))
y+=["You!"] 
print(y,id(y)) #y is still the same object. Lists are mutable. Strings are 		immutable

OUTPUT

	Hello 4579200880
	Hello You! 4578326064
	['Hello'] 4578585168
	['Hello', 'You!'] 4578585168

	print(x[::-1])  #backwards



1.排序算法
	# time - space (trade off)
	Time Complexity: C - lgN - N - NlogN - N^2 - ... - N^N
	Space Complexity: (Extra Complexity) 

牺牲空间-->换取时间

	# selection sort -> compare and swap   
	## selection, quick, merge sort  会考
	time complexity
	selection:N^2   适合基本操作，实践简单
	quick:NlnN

	merge sort: divide and concur 


2.哈希算法




	# Set
	What is Hashcode, 支持唯一性和集合操作
	https://realpython.com/python-sets/

	frozen set使用原因：不需改只需读，效率更高


	只有immutable才可以被hash
	tuple()



	Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-	value）存储，具有极快的查找速度。
	哈希表，hashTable, hashMap, key-value pair 键值对表
	
	search by key - 时间复杂度是常数级别
	array - search: 线性 
	binary search (要求已排序 lgN)



	快速查找学生成绩 学生 (名字，学号)
	dict1 - 学号 : (名字，成绩)   *tuple*




# CRUD, index - hash function 
# hash(str) -> int
# A A P L -> 
# B
def hash(input):
    res = 0
    for s in input:
        res += ascii(s) # 65 + 65 + 80 + 76 = 286
    return res

bucket = list(k-v pair) 

# Add: AAPL ->  538.7
(1) hash('AAPL') -> 286
(2) bucket[286] = ('AAPL', 538.7)
dic.bucket = [('AAPL', 538.7)]

# Read 
(1) hash('AAPL') -> 286
(2) return dic.bucket[286][1]

# Collision -> if interested, search online






Exception Handling:正式程序中少用

#1 silent error 
#2 re-throw 

while True:
    try:
        x = int(input("A number: "))
        y = int(input("A number: "))
        print(x+y)
        break
    except ValueError:
        print("Both inputs need to be integers! Please try again.")

做题网站
hackertank
codewars



